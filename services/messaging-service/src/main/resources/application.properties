spring.application.name=messaging-service
server.port=8080
logging.level.root=INFO
logging.file.name=logs/messaging-service.log
# Use server.servlet.encoding properties instead of deprecated spring.http.encoding.*
server.servlet.encoding.enabled=true
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.force=true

# ============================
# Kafka Configuration
# ============================
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=messaging-kafka-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer


# ============================
# Messaging Configuration
# ============================

# polling timeout in seconds
messaging.pollingTimeout=35

# ============================
# Session and Cache Configuration (Demo Mode)
# ============================
# Demo mode: Use in-memory session storage (no Redis required)
# Sessions and cache are ephemeral and will not persist across restarts
spring.session.store-type=none
spring.cache.type=none

# Session timeout (ISO-8601 duration or shorthand like 30m)
server.servlet.session.timeout=30m

# Optional admin token: if set, admin REST endpoints require header 'X-Admin-Token' to match this value.
# For development you can leave this empty to disable token check.
messaging.admin.token=

# Optional admin basic auth credentials. If provided, HTTP Basic auth will be enabled
# for admin endpoints. Use environment variables to set securely in production.
# Example:
#   messaging.admin.user=admin
#   messaging.admin.password=StrongPasswordHere
messaging.admin.user=admin
messaging.admin.password=admin

# ============================
# Postgres datasource and Flyway (defaults / placeholders)
# ============================
# Configure these via environment variables in production. Example env vars:
#  SPRING_DATASOURCE_URL=jdbc:postgresql://db.example.com:5432/messaging
#  SPRING_DATASOURCE_USERNAME=messaging
#  SPRING_DATASOURCE_PASSWORD=secret

# JDBC URL for Postgres (leave empty to disable DB in development)
spring.datasource.url=jdbc:postgresql://localhost:5432/messaging_db
spring.datasource.username=messaging
spring.datasource.password=messaging_pass

# Hibernate & JPA settings
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.format_sql=false

# Flyway settings (migrations stored in classpath:db/migration)
# Disabled for now because you have no existing data and prefer Hibernate to create schema
spring.flyway.enabled=false
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true

# Ensure JPA initialization (validation) is deferred until after Flyway migrations run
spring.jpa.defer-datasource-initialization=true

# Connection pool tuning (Hikari)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.max-lifetime=1800000
